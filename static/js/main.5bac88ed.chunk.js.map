{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","snake","rows","columns","headX","headY","tailX","tailY","incX","incY","foodX","foodY","snakeQueue","gameStatus","score","level","overlayOpacity","opacity","maxScore","buttonText","initialize","speed","isGameOver","Array","fill","map","direction","handleKeyDown","e","keyCode","upArrowKey","downArrowKey","leftArrowKey","rightArrowKey","startGame","generateFood","snakeRun","setState","gameInterval","setInterval","gameOver","push","increaseScore","length","shift","clearInterval","Math","floor","random","find","_this2","react_default","a","createElement","onKeyDown","tabIndex","className","src","logo","alt","toConsumableArray","i","j","key","style","display","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5bac88ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  snake = [];\n  rows = 0;\n  columns = 0;\n  headX = 10;\n  headY = 10;\n  tailX = 10;\n  tailY = 10;\n  incX = 0;\n  incY= 0;\n  foodX = 0;\n  foodY = 0;\n  snakeQueue = [];\n  gameStatus = {\n    score:0,\n    level:1,\n  }\n  overlayOpacity = {\n    opacity: 1\n  }\n  maxScore = 0;\n  buttonText = \"Start Game\";\n  constructor(){\n    super(); \n    this.initialize();\n  }\n\n  initialize = ()=>{\n    this.speed = 500;\n    this.snake = [];\n    this.rows = 17;\n    this.columns = 23;\n    this.headX = 10;\n    this.headY = 10;\n    this.tailX = 10;\n    this.tailY = 10;\n    this.incX = 0;\n    this.incY= 1;\n    this.foodX = 0;\n    this.foodY = 0;\n    this.isGameOver = false;\n    this.snake = Array(this.rows).fill().map(() => Array(this.columns).fill(0));\n    this.snakeQueue = [];\n    this.gameStatus = {\n      score:0,\n      level:1,\n    }\n  }\n  render() {\n    return (\n      <div onKeyDown={ this.handleKeyDown }  tabIndex=\"0\" >\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </header>\n        </div>\n        <div className=\"container\">\n          <div className=\"row mt-2\">\n            <div className=\"col-12-md\">\n              Score:<span className=\"badge badge-primary m-2\"> {this.gameStatus.score}</span>\n              Level: <span className=\"badge badge-primary m-2\">{this.gameStatus.level}</span>\n              High Score: <span className=\"badge badge-primary m-2\">{this.maxScore}</span>\n            </div>\n          </div>\n          <div className=\"row mt-4\">\n            <div className=\"col-8-md\">\n              <div className=\"gameboard\">\n              {[...Array(17)].map((e, i) => \n                [...Array(23)].map((e, j) => <div className={this.snake[i][j]==1?\"cell snakebody\":(this.snake[i][j]==2?\"cell food\":\"cell\")} key={i+''+j}></div>)\n              )}\n              <div style={this.overlayOpacity} className=\"overlay \">\n                <p className=\"game-over\" style={ {display: (this.isGameOver?'block':'none')}} >GAME OVER</p>\n                <button className=\"btn btn-lg btn-primary text\" onClick={this.startGame}>{this.buttonText}</button>\n              </div>\n              </div>\n            </div>\n            <div className=\"ml-4 col-4-md\">\n            </div>\n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n  \n  direction = \"R\";\n  handleKeyDown = (e)=> {\n    switch(e.keyCode){\n      case 38:\n        if(this.direction!=\"D\"){\n          this.upArrowKey();\n          this.direction = \"U\";\n        }\n        break;\n      case 40:\n        if(this.direction!=\"U\"){\n          this.downArrowKey();\n          this.direction = \"D\";\n        }\n        break;\n      case 37:\n        if(this.direction!=\"R\"){\n          this.leftArrowKey();\n          this.direction = \"L\";\n        }\n        break;\n      case 39:\n        if(this.direction!=\"L\"){\n          this.rightArrowKey();\n          this.direction = \"R\";\n        }\n        break;\n    }\n  }\n  upArrowKey=()=>{\n    this.incX = -1;\n    this.incY = 0;\n  }\n  downArrowKey=()=>{ \n    this.incX = 1;\n    this.incY = 0;\n  }\n  leftArrowKey=()=>{\n    this.incX = 0;\n    this.incY = -1;\n  }\n  rightArrowKey=()=>{\n    this.incX = 0;\n    this.incY = 1;\n  }\n  \n\n  startGame=()=>{\n    this.initialize();\n    this.generateFood();\n    this.overlayOpacity = {\n      opacity: 0\n    }\n    this.snakeRun(500);\n    this.buttonText = \"Restart\";\n    this.setState({overlayOpacity: this.overlayOpacity,buttonText: this.buttonText});\n  }\n  snakeRun = ()=>{\n    this.gameInterval = setInterval(()=>{\n      \n      this.headX = this.headX+this.incX;\n      this.headY = this.headY+this.incY;\n      if(this.headX >= this.rows || this.headY > this.columns || this.headX <0 || this.headY < 0 || this.snake[this.headX][this.headY]==1){\n        this.gameOver();\n      }\n      else if(this.snake[this.headX][this.headY] ==2){\n        this.snake[this.headX][this.headY] = 1;\n        this.snakeQueue.push([ this.headX, this.headY ]);\n        this.generateFood();\n        this.increaseScore();\n        this.setState({snake: this.snake});\n      }\n      else{\n        if(this.snakeQueue.length>0){\n          this.tailX = this.snakeQueue[0][0];\n          this.tailY = this.snakeQueue[0][1];\n          this.snake[this.tailX][this.tailY] = 0;\n          this.snakeQueue.shift();\n        }\n        this.snake[this.headX][this.headY] = 1;\n        this.snakeQueue.push([ this.headX, this.headY ]);\n       \n        this.setState({snake: this.snake});\n      }\n    },this.speed);\n  }\n  gameOver = ()=>{\n    clearInterval(this.gameInterval);\n    if(this.gameStatus.score>this.maxScore){\n     this.maxScore = this.gameStatus.score;\n     this.setState({maxScore: this.maxScore});\n    }\n    this.isGameOver = true;\n    this.overlayOpacity = {\n      opacity: 1\n    }\n    this.setState({overlayOpacity: this.overlayOpacity, isGameOver: this.isGameOver});\n  }\n\n  generateFood =()=>{\n    this.foodX = Math.floor(Math.random() * (this.rows));\n    this.foodY = Math.floor(Math.random() * (this.columns));\n    if(this.snakeQueue.find(e=> e[0] == this.foodX && e[1]== this.foodY)){\n      this.generateFood();\n    }else{\n    this.snake[this.foodX][this.foodY] = 2;\n    }\n    //this.setState({snake:this.snake});\n  }\n\n  increaseScore = ()=>{\n    this.gameStatus.score++;\n    if(this.gameStatus.score%10==0 && this.gameStatus.level < 3){\n      this.speed = this.speed-100;\n      this.gameStatus.level++;\n      clearInterval(this.gameInterval);\n      this.snakeRun();\n    };\n    this.setState({score: this.gameStatus.score, level: this.gameStatus.level});\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}